// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function codec(reducer, mapper, str) {
  var to_canonical_form = function (str) {
    return List.rev($$Array.fold_left(reducer, /* [] */0, str.split("")));
  };
  var str$1 = to_canonical_form(str);
  return $$String.concat("", List.map(mapper, str$1));
}

function encode(str) {
  var parse_input = function (acc, x) {
    if (acc) {
      var match = acc[0];
      var str = match[1];
      if (Caml_obj.caml_equal(str, x)) {
        return /* :: */[
                /* tuple */[
                  match[0] + 1 | 0,
                  str
                ],
                acc[1]
              ];
      } else {
        return /* :: */[
                /* tuple */[
                  1,
                  x
                ],
                acc
              ];
      }
    } else {
      return /* :: */[
              /* tuple */[
                1,
                x
              ],
              acc
            ];
    }
  };
  var encode_occurances = function (param) {
    var str = param[1];
    var count = param[0];
    var match = count > 1;
    if (match) {
      return String(count) + str;
    } else {
      return str;
    }
  };
  return codec(parse_input, encode_occurances, str);
}

function decode(str) {
  var is_digit = function (x) {
    return Js_primitive.null_to_opt(x.match((/^[0-9]$/))) !== undefined;
  };
  var concat_digit = function (count, x) {
    return Caml_format.caml_int_of_string(String(count) + x);
  };
  var parse_input = function (acc, x) {
    var exit = 0;
    if (acc) {
      var match = acc[0];
      if (match[1] !== undefined || !is_digit(x)) {
        exit = 1;
      } else {
        return /* :: */[
                /* tuple */[
                  concat_digit(match[0], x),
                  undefined
                ],
                acc[1]
              ];
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (is_digit(x)) {
        return /* :: */[
                /* tuple */[
                  Caml_format.caml_int_of_string(x),
                  undefined
                ],
                acc
              ];
      } else if (acc) {
        var match$1 = acc[0];
        if (match$1[1] !== undefined) {
          return /* :: */[
                  /* tuple */[
                    1,
                    x
                  ],
                  acc
                ];
        } else {
          return /* :: */[
                  /* tuple */[
                    match$1[0],
                    x
                  ],
                  acc[1]
                ];
        }
      } else {
        return /* :: */[
                /* tuple */[
                  1,
                  x
                ],
                acc
              ];
      }
    }
    
  };
  var decode_occurances = function (param) {
    var match = param[1];
    if (match !== undefined) {
      return match.repeat(param[0]);
    } else {
      return "";
    }
  };
  return codec(parse_input, decode_occurances, str);
}

exports.encode = encode;
exports.decode = decode;
/* No side effect */
