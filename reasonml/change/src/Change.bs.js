// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");

function makeChange(target, coins) {
  var generateWaysToMakeChange = function (waysToMakeChange, target) {
    var filterCoinsThatMakeChangeForTarget = List.filter((function (coin) {
            return Belt_MapInt.has(waysToMakeChange, target - coin | 0);
          }));
    var makeAllPossibleWaysToMakeTarget = function (param) {
      return List.map((function (c) {
                    return /* :: */[
                            c,
                            Belt_MapInt.getExn(waysToMakeChange, target - c | 0)
                          ];
                  }), param);
    };
    var shortestWay = function (c1, c2) {
      var match = List.length(c1) < List.length(c2);
      if (match) {
        return c1;
      } else {
        return c2;
      }
    };
    var param = makeAllPossibleWaysToMakeTarget(Curry._1(filterCoinsThatMakeChangeForTarget, coins));
    if (param) {
      return Belt_MapInt.set(waysToMakeChange, target, List.sort(Caml_obj.caml_compare, List.fold_left(shortestWay, param[0], param[1])));
    } else {
      return waysToMakeChange;
    }
  };
  var baseCaseWaysToMakeChange = Belt_MapInt.fromArray(/* array */[/* tuple */[
          0,
          /* [] */0
        ]]);
  return Belt_MapInt.get(Belt_Array.reduce(Belt_Array.range(1, target), baseCaseWaysToMakeChange, generateWaysToMakeChange), target);
}

exports.makeChange = makeChange;
/* No side effect */
